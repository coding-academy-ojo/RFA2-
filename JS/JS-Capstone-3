# 🌍 JS Capstone Project 3 – Travel Bucket List & Weather Dashboard

A web application that lets users **plan travel destinations**, mark visited places, and view **live weather data** for each location.  
This project integrates **JavaScript ES5 & ES6**, **DOM manipulation**, **JSON**, **fetch API**, and **web storage** into one complete app.

---

## 📋 Project Overview
This application allows users to:
- Add destinations to a **Travel Bucket List**.
- Mark them as visited or to-visit.
- Fetch and display **real-time weather data** from a public API.
- Store data **persistently** using `localStorage` and track the **last accessed destination** with `sessionStorage`.

---

## 🛠 Skills Covered
- JavaScript Foundations
- Conditional Statements
- Loops & Iteration
- DOM Manipulation
- ES5 & ES6 Syntax
- JSON Parsing & Stringifying
- Fetch API & Asynchronous JavaScript
- Web Storage (`localStorage` & `sessionStorage`)

---

## 🎯 Features

| Feature                | Description |
|------------------------|-------------|
| **Destination Management** | Add, delete, and mark destinations as visited or to-visit |
| **Weather Data Integration** | Fetch weather details (temperature, description, icon) for each destination |
| **Persistent Storage** | Save destinations using `localStorage` |
| **Session Tracking** | Store the last accessed destination in `sessionStorage` |
| **Responsive UI** | Clean and user-friendly design for multiple devices |

---

## 📌 Project Requirements

### Core
- Add a destination with **Name**, **Country**, and **Optional Notes**.
- Fetch weather data via API (e.g., [OpenWeatherMap](https://openweathermap.org/api)).
- Save data to `localStorage` & load it on refresh.
- Track **last visited** destination with `sessionStorage`.

### Additional
- Input validation before adding destinations.
- Loops to display destination lists.
- Conditional rendering for empty states.
- JSON conversion when storing and retrieving.

---

## 🧪 Assessment Criteria

| Criteria              | Weight |
|-----------------------|--------|
| Functionality         | 30%    |
| Code Quality          | 20%    |
| ES5 & ES6 Usage       | 10%    |
| DOM Manipulation      | 15%    |
| API Integration       | 10%    |
| Web Storage           | 10%    |
| Creativity            | 5%     |

---

<details>
<summary>📂 Suggested Project Structure</summary>

project/
│
├── index.html
├── style.css
├── script.js
└── README.md


**index.html**
- Input form for destinations
- "To Visit" & "Visited" lists
- Weather display section

**style.css**
- Layout & responsive styling
- Visited destination styles
- Weather card design

**script.js**
- Array management for destinations
- Local/session storage functions
- API fetching
- DOM updates
</details>

🧪 Testing & Debugging
Add several destinations → Verify they appear in the correct list.

Fetch weather → Confirm it displays correctly.

Refresh page → Ensure data persists via localStorage.

Check console → No errors should appear.

Test invalid inputs → Error handling should work.

📤 Deliverables
GitHub repository containing:

index.html

style.css

script.js

README.md

Live Demo link (GitHub Pages recommended).

Short walkthrough video (optional but encouraged).

🛠 Suggested Tools
Editor: Visual Studio Code

Browser: Chrome / Firefox Dev Edition

Version Control: Git & GitHub

Live Server: VS Code extension for live preview

🚀 Getting Started
Clone this repo:
git clone https://github.com/gitHUbUserName/travel-bucket-weather.git

Open in VS Code.
Run Live Server to preview.
Start adding destinations & exploring features.

📜 License
This project is open-source and available under the MIT License.


---

If you want, I can also create a **starter GitHub repo** for this with:
- Empty HTML, CSS, JS files
- This README.md preloaded
- A `.gitignore`
- Placeholder API integration code

That way your students can just fork and start building. Would you like me to prepare that?
